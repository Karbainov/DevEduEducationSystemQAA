// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DevEduEducationSystem.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Manager_Functionality")]
    public partial class Manager_FunctionalityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Manager_Functionality.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Manager_Functionality", @"1.)Как менеджер/админ, я хочу назначать роли юзерам
2.) Как менеджер, я хочу создавать группу
3.) Как менеджер, я хочу получить созданную группу по id 
4.)Как менеджер. я хочу добавлять в группу студента, преподавателя и тьютора
5.) Как менеджер, я хочу изменять группу 
6.)Как менеджер, я хочу удалять группу
7.)Как менеджер, я хочу менять статус группы
8.) Как менеджер, я хочу удалять юзера из группы
9.)Как менеджер, я хочу создавать оплату", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manadger I want to assign a role to users")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smit@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Хагрид", "Рубеус", "Колтрейн", "Rubeus6@mail.ru", "Hagrid", "hagridRubeus", "SaintPetersburg", "01.03.2003", "string", "89211111111", "Methodist", null)]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smit1@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Римус", "Джон", "Люпин", "Djon6@mail.ru", "Rimus", "rimusDjon", "SaintPetersburg", "01.03.1990", "string", "89110001234", "Teacher", null)]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smit2@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Златопуст", "Локонс", "Брана", "Brana6@mail.ru", "Zlatopust", "zlatopust", "SaintPetersburg", "01.12.2001", "string", "89210081122", "Tutor", null)]
        public virtual void AsManadgerIWantToAssignARoleToUsers(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string newFirstName, 
                    string newLastName, 
                    string newPatronymic, 
                    string newEmail, 
                    string newUsername, 
                    string newPassword, 
                    string newCity, 
                    string newBirthDate, 
                    string newGitHubAccount, 
                    string newPhoneNumber, 
                    string nameRole, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("NewFirstName", newFirstName);
            argumentsOfScenario.Add("NewLastName", newLastName);
            argumentsOfScenario.Add("NewPatronymic", newPatronymic);
            argumentsOfScenario.Add("NewEmail", newEmail);
            argumentsOfScenario.Add("NewUsername", newUsername);
            argumentsOfScenario.Add("NewPassword", newPassword);
            argumentsOfScenario.Add("NewCity", newCity);
            argumentsOfScenario.Add("NewBirthDate", newBirthDate);
            argumentsOfScenario.Add("NewGitHubAccount", newGitHubAccount);
            argumentsOfScenario.Add("NewPhoneNumber", newPhoneNumber);
            argumentsOfScenario.Add("NameRole", nameRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manadger I want to assign a role to users", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table47.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
#line 15
 testRunner.Given("Create user", ((string)(null)), table47, "Given ");
#line hidden
#line 18
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("Assing User \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table48.AddRow(new string[] {
                            string.Format("{0}", newFirstName),
                            string.Format("{0}", newLastName),
                            string.Format("{0}", newPatronymic),
                            string.Format("{0}", newEmail),
                            string.Format("{0}", newUsername),
                            string.Format("{0}", newPassword),
                            string.Format("{0}", newCity),
                            string.Format("{0}", newBirthDate),
                            string.Format("{0}", newGitHubAccount),
                            string.Format("{0}", newPhoneNumber)});
#line 20
 testRunner.Given("Create new users for our roles", ((string)(null)), table48, "Given ");
#line hidden
#line 23
 testRunner.When("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table49.AddRow(new string[] {
                            string.Format("{0}", nameRole)});
#line 24
 testRunner.And("Assing users role methodist, teacher, tutor", ((string)(null)), table49, "And ");
#line hidden
#line 27
 testRunner.Then("Сheck user roles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want to create groups")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smit3@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Хагрид", "Рубеус", "Колтрейн", "Rubeus@mail.ru", "Hagrid", "hagridRubeus", "SaintPetersburg", "01.03.2003", "string", "89211111111", "Manager", "Methodist", null)]
        public virtual void AsAManagerIWantToCreateGroups(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string mehodistFirstName, 
                    string mehodistLastName, 
                    string mehodistPatronymic, 
                    string mehodistEmail, 
                    string mehodistUsername, 
                    string mehodistPassword, 
                    string mehodistCity, 
                    string mehodistBirthDate, 
                    string mehodistGitHubAccount, 
                    string mehodistPhoneNumber, 
                    string nameRole, 
                    string mehodistNameRole, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("MehodistFirstName", mehodistFirstName);
            argumentsOfScenario.Add("MehodistLastName", mehodistLastName);
            argumentsOfScenario.Add("MehodistPatronymic", mehodistPatronymic);
            argumentsOfScenario.Add("MehodistEmail", mehodistEmail);
            argumentsOfScenario.Add("MehodistUsername", mehodistUsername);
            argumentsOfScenario.Add("MehodistPassword", mehodistPassword);
            argumentsOfScenario.Add("MehodistCity", mehodistCity);
            argumentsOfScenario.Add("MehodistBirthDate", mehodistBirthDate);
            argumentsOfScenario.Add("MehodistGitHubAccount", mehodistGitHubAccount);
            argumentsOfScenario.Add("MehodistPhoneNumber", mehodistPhoneNumber);
            argumentsOfScenario.Add("NameRole", nameRole);
            argumentsOfScenario.Add("MehodistNameRole", mehodistNameRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want to create groups", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table50.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table50.AddRow(new string[] {
                            string.Format("{0}", mehodistFirstName),
                            string.Format("{0}", mehodistLastName),
                            string.Format("{0}", mehodistPatronymic),
                            string.Format("{0}", mehodistEmail),
                            string.Format("{0}", mehodistUsername),
                            string.Format("{0}", mehodistPassword),
                            string.Format("{0}", mehodistCity),
                            string.Format("{0}", mehodistBirthDate),
                            string.Format("{0}", mehodistGitHubAccount),
                            string.Format("{0}", mehodistPhoneNumber)});
#line 35
    testRunner.Given("Create user", ((string)(null)), table50, "Given ");
#line hidden
#line 39
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table51.AddRow(new string[] {
                            string.Format("{0}", nameRole)});
                table51.AddRow(new string[] {
                            string.Format("{0}", mehodistNameRole)});
#line 40
 testRunner.And("Assing Manager and Methodist roles", ((string)(null)), table51, "And ");
#line hidden
#line 44
 testRunner.When("Autorized by methodist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table52.AddRow(new string[] {
                            "QQQ",
                            "Где Q и как его выводить на экран три раза"});
#line 45
 testRunner.Given("Create Course by methodist", ((string)(null)), table52, "Given ");
#line hidden
#line 48
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table53.AddRow(new string[] {
                            "Группа 1",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 18:00 - 20:00",
                            "7500"});
#line 49
 testRunner.When("Create Groupe", ((string)(null)), table53, "When ");
#line hidden
#line 52
 testRunner.Then("Compare group status code 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.When("Get group by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("Compare the resulting group by id with group request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want add in group students, teachers and tutors")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smit4@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Хагрид", "Рубеус", "Колтрейн", "Rubeus1@mail.ru", "Hagrid", "hagridRubeus", "SaintPetersburg", "01.03.2003", "string", "89211111111", "Manager", "Methodist", null)]
        public virtual void AsAManagerIWantAddInGroupStudentsTeachersAndTutors(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string mehodistFirstName, 
                    string mehodistLastName, 
                    string mehodistPatronymic, 
                    string mehodistEmail, 
                    string mehodistUsername, 
                    string mehodistPassword, 
                    string mehodistCity, 
                    string mehodistBirthDate, 
                    string mehodistGitHubAccount, 
                    string mehodistPhoneNumber, 
                    string nameRole, 
                    string mehodistNameRole, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("MehodistFirstName", mehodistFirstName);
            argumentsOfScenario.Add("MehodistLastName", mehodistLastName);
            argumentsOfScenario.Add("MehodistPatronymic", mehodistPatronymic);
            argumentsOfScenario.Add("MehodistEmail", mehodistEmail);
            argumentsOfScenario.Add("MehodistUsername", mehodistUsername);
            argumentsOfScenario.Add("MehodistPassword", mehodistPassword);
            argumentsOfScenario.Add("MehodistCity", mehodistCity);
            argumentsOfScenario.Add("MehodistBirthDate", mehodistBirthDate);
            argumentsOfScenario.Add("MehodistGitHubAccount", mehodistGitHubAccount);
            argumentsOfScenario.Add("MehodistPhoneNumber", mehodistPhoneNumber);
            argumentsOfScenario.Add("NameRole", nameRole);
            argumentsOfScenario.Add("MehodistNameRole", mehodistNameRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want add in group students, teachers and tutors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table54.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table54.AddRow(new string[] {
                            string.Format("{0}", mehodistFirstName),
                            string.Format("{0}", mehodistLastName),
                            string.Format("{0}", mehodistPatronymic),
                            string.Format("{0}", mehodistEmail),
                            string.Format("{0}", mehodistUsername),
                            string.Format("{0}", mehodistPassword),
                            string.Format("{0}", mehodistCity),
                            string.Format("{0}", mehodistBirthDate),
                            string.Format("{0}", mehodistGitHubAccount),
                            string.Format("{0}", mehodistPhoneNumber)});
#line 61
  testRunner.Given("Create user", ((string)(null)), table54, "Given ");
#line hidden
#line 65
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table55.AddRow(new string[] {
                            string.Format("{0}", nameRole)});
                table55.AddRow(new string[] {
                            string.Format("{0}", mehodistNameRole)});
#line 66
 testRunner.And("Assing Manager and Methodist roles", ((string)(null)), table55, "And ");
#line hidden
#line 70
 testRunner.When("Autorized by methodist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table56.AddRow(new string[] {
                            "Дрязяшки",
                            "Курс юных любителей анлийского языка"});
#line 71
 testRunner.Given("Create Course by methodist", ((string)(null)), table56, "Given ");
#line hidden
#line 74
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table57.AddRow(new string[] {
                            "Группа 2",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 10:00 - 14:00",
                            "7500"});
#line 75
 testRunner.And("Create Groupe", ((string)(null)), table57, "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table58.AddRow(new string[] {
                            "Рональд",
                            "Билиус",
                            "Уизли",
                            "Ron@mail.ru",
                            "Ronald",
                            "RonUizli",
                            "SaintPetersburg",
                            "01.01.2000",
                            "string",
                            "89991122334"});
                table58.AddRow(new string[] {
                            "Аластор",
                            "Mad-Eye",
                            "Грюм",
                            "Alastor@mail.ru",
                            "Alastor",
                            "menacingEye",
                            "SaintPetersburg",
                            "01.01.1992",
                            "string",
                            "89213456789"});
                table58.AddRow(new string[] {
                            "Златопуст",
                            "Локонс",
                            "Брана",
                            "Brana6@mail.ru",
                            "Zlatopust",
                            "zlatopust",
                            "SaintPetersburg",
                            "01.12.2001",
                            "string",
                            "89210081122"});
#line 78
 testRunner.Given("Create three users", ((string)(null)), table58, "Given ");
#line hidden
#line 83
 testRunner.And("Assign two students roles \"Teacher\" and \"Tutor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("Get Users by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.When("Add three users Student, Teacher and Tutor in group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And("Get my group by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.Then("Compare the resulting filled group by id with group request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want change my created group")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Миневра", "Макгонагалл", "Смит", "Smitt@mail.ru", "Minevra", "minevraSmit", "SaintPetersburg", "01.01.1985", "string", "89991111111", "Хагрид", "Рубеус", "Колтрейн", "Rubeuss@mail.ru", "Hagrid", "hagridRubeus", "SaintPetersburg", "01.03.2003", "string", "89211111111", "Manager", "Methodist", null)]
        public virtual void AsManagerIWantChangeMyCreatedGroup(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string mehodistFirstName, 
                    string mehodistLastName, 
                    string mehodistPatronymic, 
                    string mehodistEmail, 
                    string mehodistUsername, 
                    string mehodistPassword, 
                    string mehodistCity, 
                    string mehodistBirthDate, 
                    string mehodistGitHubAccount, 
                    string mehodistPhoneNumber, 
                    string nameRole, 
                    string mehodistNameRole, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("MehodistFirstName", mehodistFirstName);
            argumentsOfScenario.Add("MehodistLastName", mehodistLastName);
            argumentsOfScenario.Add("MehodistPatronymic", mehodistPatronymic);
            argumentsOfScenario.Add("MehodistEmail", mehodistEmail);
            argumentsOfScenario.Add("MehodistUsername", mehodistUsername);
            argumentsOfScenario.Add("MehodistPassword", mehodistPassword);
            argumentsOfScenario.Add("MehodistCity", mehodistCity);
            argumentsOfScenario.Add("MehodistBirthDate", mehodistBirthDate);
            argumentsOfScenario.Add("MehodistGitHubAccount", mehodistGitHubAccount);
            argumentsOfScenario.Add("MehodistPhoneNumber", mehodistPhoneNumber);
            argumentsOfScenario.Add("NameRole", nameRole);
            argumentsOfScenario.Add("MehodistNameRole", mehodistNameRole);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want change my created group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table59.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table59.AddRow(new string[] {
                            string.Format("{0}", mehodistFirstName),
                            string.Format("{0}", mehodistLastName),
                            string.Format("{0}", mehodistPatronymic),
                            string.Format("{0}", mehodistEmail),
                            string.Format("{0}", mehodistUsername),
                            string.Format("{0}", mehodistPassword),
                            string.Format("{0}", mehodistCity),
                            string.Format("{0}", mehodistBirthDate),
                            string.Format("{0}", mehodistGitHubAccount),
                            string.Format("{0}", mehodistPhoneNumber)});
#line 93
    testRunner.Given("Create user", ((string)(null)), table59, "Given ");
#line hidden
#line 97
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table60.AddRow(new string[] {
                            string.Format("{0}", nameRole)});
                table60.AddRow(new string[] {
                            string.Format("{0}", mehodistNameRole)});
#line 98
 testRunner.And("Assing Manager and Methodist roles", ((string)(null)), table60, "And ");
#line hidden
#line 102
 testRunner.When("Autorized by methodist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table61.AddRow(new string[] {
                            "Юный натуралист",
                            "Чем double отличается от decimal"});
#line 103
 testRunner.Given("Create Course by methodist", ((string)(null)), table61, "Given ");
#line hidden
#line 106
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table62.AddRow(new string[] {
                            "Група 3",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 17:00 - 20:00",
                            "5000"});
#line 107
 testRunner.And("Create Groupe number three", ((string)(null)), table62, "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table63.AddRow(new string[] {
                            "Группа 3",
                            "1",
                            "13.05.2022",
                            "13.12.2022",
                            "вт, пт, вс 09:00 - 12:00",
                            "2500"});
#line 110
   testRunner.When("chanche group", ((string)(null)), table63, "When ");
#line hidden
#line 113
   testRunner.And("Get group number three by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
   testRunner.Then("Сompare changed group and returned group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want to delete a group")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Солнышки", "Как опоздать на 10 минут", "QAA", "1", "13.05.2022", "13.12.2022", "вт, пт, вс 09:00 - 17:00", "7000", null)]
        public virtual void AsAManagerIWantToDeleteAGroup(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string name, 
                    string description, 
                    string name1, 
                    string groupStatusId, 
                    string startDate, 
                    string endDate, 
                    string timetable, 
                    string paymentPerMonth, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Name 1", name1);
            argumentsOfScenario.Add("GroupStatusId", groupStatusId);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("Timetable", timetable);
            argumentsOfScenario.Add("PaymentPerMonth", paymentPerMonth);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want to delete a group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 120
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table64.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
#line 121
 testRunner.Given("Create user", ((string)(null)), table64, "Given ");
#line hidden
#line 124
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table65.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", description)});
#line 126
 testRunner.And("Create course", ((string)(null)), table65, "And ");
#line hidden
#line 129
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table66.AddRow(new string[] {
                            string.Format("{0}", name1),
                            string.Format("{0}", groupStatusId),
                            string.Format("{0}", startDate),
                            string.Format("{0}", endDate),
                            string.Format("{0}", timetable),
                            string.Format("{0}", paymentPerMonth)});
#line 130
 testRunner.And("Create Groupe QAA", ((string)(null)), table66, "And ");
#line hidden
#line 133
 testRunner.When("Delete group by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
 testRunner.And("Get all groups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.Then("Deleted group should disappear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want to change the status group")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "MyBack", "Как опоздать на 10 минут", "Back", "1", "13.05.2022", "13.12.2022", "вт, пт, вс 09:00 - 17:00", "7500", "ReadyToStudy", null)]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus1@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "MyBack1", "Как опоздать на 10 минут", "Back1", "1", "13.05.2022", "13.12.2022", "вт, пт, вс 09:00 - 17:00", "7500", "InProgress", null)]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus2@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "MyBack2", "Как опоздать на 10 минут", "Back2", "1", "13.05.2022", "13.12.2022", "вт, пт, вс 09:00 - 17:00", "7500", "Completed", null)]
        public virtual void AsManagerIWantToChangeTheStatusGroup(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string name, 
                    string description, 
                    string name1, 
                    string groupStatusId, 
                    string startDate, 
                    string endDate, 
                    string timetable, 
                    string paymentPerMonth, 
                    string groupStatusName, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("Name 1", name1);
            argumentsOfScenario.Add("GroupStatusId", groupStatusId);
            argumentsOfScenario.Add("StartDate", startDate);
            argumentsOfScenario.Add("EndDate", endDate);
            argumentsOfScenario.Add("Timetable", timetable);
            argumentsOfScenario.Add("PaymentPerMonth", paymentPerMonth);
            argumentsOfScenario.Add("GroupStatusName", groupStatusName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want to change the status group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table67.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
#line 142
 testRunner.Given("Create user", ((string)(null)), table67, "Given ");
#line hidden
#line 145
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table68.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", description)});
#line 147
 testRunner.And("Create course", ((string)(null)), table68, "And ");
#line hidden
#line 150
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table69.AddRow(new string[] {
                            string.Format("{0}", name1),
                            string.Format("{0}", groupStatusId),
                            string.Format("{0}", startDate),
                            string.Format("{0}", endDate),
                            string.Format("{0}", timetable),
                            string.Format("{0}", paymentPerMonth)});
#line 151
 testRunner.And("Create Groupe Back", ((string)(null)), table69, "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "GroupStatusName"});
                table70.AddRow(new string[] {
                            string.Format("{0}", groupStatusName)});
#line 154
 testRunner.When("Change group status by id", ((string)(null)), table70, "When ");
#line hidden
#line 157
 testRunner.Then("Group Status should changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want to remove a student from a group")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        public virtual void AsManagerIWantToRemoveAStudentFromAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "Manager"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want to remove a student from a group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table71.AddRow(new string[] {
                            "Марина",
                            "Пушкина",
                            "Иванова",
                            "Pushkin90@mail.ru",
                            "Маришка",
                            "PushkinMarishka",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89001112345"});
                table71.AddRow(new string[] {
                            "Антон",
                            "Пушкин",
                            "Эдикович",
                            "Anton@mail.ru",
                            "Antonio",
                            "Antonio1990",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89012223344"});
                table71.AddRow(new string[] {
                            "Максим",
                            "Опаздун",
                            "Опаздунович",
                            "Max@mail.ru",
                            "Opazdun",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2003",
                            "string",
                            "99117778899"});
                table71.AddRow(new string[] {
                            "Инокентий",
                            "Гай",
                            "Пай",
                            "Max1@mail.ru",
                            "Guy",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2001",
                            "string",
                            "99117778891"});
#line 166
testRunner.Given("Create user", ((string)(null)), table71, "Given ");
#line hidden
#line 172
testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table72.AddRow(new string[] {
                            "Delete",
                            "Delete me please"});
#line 173
testRunner.And("Create course", ((string)(null)), table72, "And ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table73.AddRow(new string[] {
                            "Manager"});
#line 176
testRunner.And("Assign role", ((string)(null)), table73, "And ");
#line hidden
#line 179
testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table74.AddRow(new string[] {
                            "Хочу удалить",
                            "1",
                            "01.01.2022",
                            "01.10.2022",
                            "пр пр пр 13244",
                            "1000"});
#line 180
testRunner.And("Сreate a group to remove a user from it", ((string)(null)), table74, "And ");
#line hidden
#line 183
testRunner.And("Add Users in group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
testRunner.When("Delete adding user from a group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
testRunner.And("Get group  by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table75.AddRow(new string[] {
                            "Антон",
                            "Пушкин",
                            "Эдикович",
                            "Anton@mail.ru",
                            "Antonio",
                            "Antonio1990",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89012223344"});
                table75.AddRow(new string[] {
                            "Максим",
                            "Опаздун",
                            "Опаздунович",
                            "Max@mail.ru",
                            "Opazdun",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2003",
                            "string",
                            "99117778899"});
                table75.AddRow(new string[] {
                            "Инокентий",
                            "Гай",
                            "Пай",
                            "Max1@mail.ru",
                            "Guy",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2001",
                            "string",
                            "99117778891"});
#line 186
testRunner.Then("Check that student have left the group", ((string)(null)), table75, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want to remove a teacher from a group")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        public virtual void AsManagerIWantToRemoveATeacherFromAGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "Manager"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want to remove a teacher from a group", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table76.AddRow(new string[] {
                            "Марина",
                            "Пушкина",
                            "Иванова",
                            "Pushkin90@mail.ru",
                            "Маришка",
                            "PushkinMarishka",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89001112345"});
                table76.AddRow(new string[] {
                            "Антон",
                            "Пушкин",
                            "Эдикович",
                            "Anton@mail.ru",
                            "Antonio",
                            "Antonio1990",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89012223344"});
                table76.AddRow(new string[] {
                            "Максим",
                            "Опаздун",
                            "Опаздунович",
                            "Max@mail.ru",
                            "Opazdun",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2003",
                            "string",
                            "99117778899"});
                table76.AddRow(new string[] {
                            "Инокентий",
                            "Гай",
                            "Пай",
                            "Max1@mail.ru",
                            "Guy",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2001",
                            "string",
                            "99117778891"});
#line 194
testRunner.Given("Create user", ((string)(null)), table76, "Given ");
#line hidden
#line 200
testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table77.AddRow(new string[] {
                            "Delete",
                            "Delete me please"});
#line 201
testRunner.And("Create course", ((string)(null)), table77, "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "NameRole"});
                table78.AddRow(new string[] {
                            "Manager"});
                table78.AddRow(new string[] {
                            "Teacher"});
#line 204
testRunner.And("Assign role", ((string)(null)), table78, "And ");
#line hidden
#line 208
testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table79.AddRow(new string[] {
                            "Хочу удалить",
                            "1",
                            "01.01.2022",
                            "01.10.2022",
                            "пр пр пр 13244",
                            "1000"});
#line 209
testRunner.And("Сreate a group to remove a user from it", ((string)(null)), table79, "And ");
#line hidden
#line 212
testRunner.And("Add Users in group as teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
testRunner.When("Delete adding teacher from a group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
testRunner.And("Get group  by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table80.AddRow(new string[] {
                            "Антон",
                            "Пушкин",
                            "Эдикович",
                            "Anton@mail.ru",
                            "Antonio",
                            "Antonio1990",
                            "SaintPetersburg",
                            "01.01.1990",
                            "string",
                            "89012223344"});
                table80.AddRow(new string[] {
                            "Максим",
                            "Опаздун",
                            "Опаздунович",
                            "Max@mail.ru",
                            "Opazdun",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2003",
                            "string",
                            "99117778899"});
                table80.AddRow(new string[] {
                            "Инокентий",
                            "Гай",
                            "Пай",
                            "Max1@mail.ru",
                            "Guy",
                            "Opasdun2003",
                            "SaintPetersburg",
                            "01.01.2001",
                            "string",
                            "99117778891"});
#line 215
testRunner.Then("Check that teacher have left the group", ((string)(null)), table80, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want get all groups")]
        [NUnit.Framework.CategoryAttribute("Manager")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albuss@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "MyCourse", "Как пообещать и не выполнить", null)]
        public virtual void AsManagerIWantGetAllGroups(string firstName, string lastName, string patronymic, string email, string username, string password, string city, string birthDate, string gitHubAccount, string phoneNumber, string name, string description, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Manager"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("Description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want get all groups", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table81.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
#line 223
testRunner.Given("Create user", ((string)(null)), table81, "Given ");
#line hidden
#line 226
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table82.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", description)});
#line 228
 testRunner.And("Create course", ((string)(null)), table82, "And ");
#line hidden
#line 231
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table83.AddRow(new string[] {
                            "Сосиски",
                            "1",
                            "12.02.2022",
                            "12.12.2022",
                            "Я обещаю завтра будет лучше",
                            "1000"});
                table83.AddRow(new string[] {
                            "Колбаски",
                            "1",
                            "12.02.2022",
                            "12.12.2022",
                            "Я обещаю завтра будет лучше",
                            "2000"});
                table83.AddRow(new string[] {
                            "Сордельки",
                            "1",
                            "12.02.2022",
                            "12.12.2022",
                            "Я обещаю завтра будет лучше",
                            "3000"});
#line 232
 testRunner.And("Create Groupe all group", ((string)(null)), table83, "And ");
#line hidden
#line 237
 testRunner.When("Get all  groups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 238
 testRunner.Then("Check that all groups should have returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want to create a payment")]
        [NUnit.Framework.CategoryAttribute("Payment")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "20.01.2022", "7500", "true", null)]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "Albus1Dambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "28.03.2022", "5000", "false", null)]
        public virtual void AsAManagerIWantToCreateAPayment(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string studFirstName, 
                    string studLastName, 
                    string studPatronymic, 
                    string studEmail, 
                    string studUsername, 
                    string studPassword, 
                    string studCity, 
                    string studBirthDate, 
                    string studGitHubAccount, 
                    string studPhoneNumber, 
                    string date, 
                    string sum, 
                    string isPaid, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Payment"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("StudFirstName", studFirstName);
            argumentsOfScenario.Add("StudLastName", studLastName);
            argumentsOfScenario.Add("StudPatronymic", studPatronymic);
            argumentsOfScenario.Add("StudEmail", studEmail);
            argumentsOfScenario.Add("StudUsername", studUsername);
            argumentsOfScenario.Add("StudPassword", studPassword);
            argumentsOfScenario.Add("StudCity", studCity);
            argumentsOfScenario.Add("StudBirthDate", studBirthDate);
            argumentsOfScenario.Add("StudGitHubAccount", studGitHubAccount);
            argumentsOfScenario.Add("StudPhoneNumber", studPhoneNumber);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Sum", sum);
            argumentsOfScenario.Add("IsPaid", isPaid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want to create a payment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 248
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table84.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table84.AddRow(new string[] {
                            string.Format("{0}", studFirstName),
                            string.Format("{0}", studLastName),
                            string.Format("{0}", studPatronymic),
                            string.Format("{0}", studEmail),
                            string.Format("{0}", studUsername),
                            string.Format("{0}", studPassword),
                            string.Format("{0}", studCity),
                            string.Format("{0}", studBirthDate),
                            string.Format("{0}", studGitHubAccount),
                            string.Format("{0}", studPhoneNumber)});
#line 249
 testRunner.Given("Create user", ((string)(null)), table84, "Given ");
#line hidden
#line 253
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 255
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Sum",
                            "IsPaid"});
                table85.AddRow(new string[] {
                            string.Format("{0}", date),
                            string.Format("{0}", sum),
                            string.Format("{0}", isPaid)});
#line 256
 testRunner.When("Create one payment", ((string)(null)), table85, "When ");
#line hidden
#line 259
 testRunner.And("Get payment by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
 testRunner.Then("Created payment should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As manager, I want to create a payment. Negative")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "20.01.1754", "7500", "true", null)]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "Albus1Dambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "28.03.2022", "-5000", "false", null)]
        public virtual void AsManagerIWantToCreateAPayment_Negative(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string studFirstName, 
                    string studLastName, 
                    string studPatronymic, 
                    string studEmail, 
                    string studUsername, 
                    string studPassword, 
                    string studCity, 
                    string studBirthDate, 
                    string studGitHubAccount, 
                    string studPhoneNumber, 
                    string date, 
                    string sum, 
                    string isPaid, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("StudFirstName", studFirstName);
            argumentsOfScenario.Add("StudLastName", studLastName);
            argumentsOfScenario.Add("StudPatronymic", studPatronymic);
            argumentsOfScenario.Add("StudEmail", studEmail);
            argumentsOfScenario.Add("StudUsername", studUsername);
            argumentsOfScenario.Add("StudPassword", studPassword);
            argumentsOfScenario.Add("StudCity", studCity);
            argumentsOfScenario.Add("StudBirthDate", studBirthDate);
            argumentsOfScenario.Add("StudGitHubAccount", studGitHubAccount);
            argumentsOfScenario.Add("StudPhoneNumber", studPhoneNumber);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Sum", sum);
            argumentsOfScenario.Add("IsPaid", isPaid);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As manager, I want to create a payment. Negative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 267
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table86.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table86.AddRow(new string[] {
                            string.Format("{0}", studFirstName),
                            string.Format("{0}", studLastName),
                            string.Format("{0}", studPatronymic),
                            string.Format("{0}", studEmail),
                            string.Format("{0}", studUsername),
                            string.Format("{0}", studPassword),
                            string.Format("{0}", studCity),
                            string.Format("{0}", studBirthDate),
                            string.Format("{0}", studGitHubAccount),
                            string.Format("{0}", studPhoneNumber)});
#line 268
 testRunner.Given("Create user", ((string)(null)), table86, "Given ");
#line hidden
#line 272
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Sum",
                            "IsPaid"});
                table87.AddRow(new string[] {
                            string.Format("{0}", date),
                            string.Format("{0}", sum),
                            string.Format("{0}", isPaid)});
#line 275
 testRunner.When("Create one payment", ((string)(null)), table87, "When ");
#line hidden
#line 278
 testRunner.Then("Should return Status code 422", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want to change payment")]
        [NUnit.Framework.CategoryAttribute("payment")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "20.01.2022", "7500", "true", "28.02.2022", "9500", "false", null)]
        public virtual void AsAManagerIWantToChangePayment(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string studFirstName, 
                    string studLastName, 
                    string studPatronymic, 
                    string studEmail, 
                    string studUsername, 
                    string studPassword, 
                    string studCity, 
                    string studBirthDate, 
                    string studGitHubAccount, 
                    string studPhoneNumber, 
                    string date, 
                    string sum, 
                    string isPaid, 
                    string dateChange, 
                    string sumChange, 
                    string isPaidChange, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "payment"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("StudFirstName", studFirstName);
            argumentsOfScenario.Add("StudLastName", studLastName);
            argumentsOfScenario.Add("StudPatronymic", studPatronymic);
            argumentsOfScenario.Add("StudEmail", studEmail);
            argumentsOfScenario.Add("StudUsername", studUsername);
            argumentsOfScenario.Add("StudPassword", studPassword);
            argumentsOfScenario.Add("StudCity", studCity);
            argumentsOfScenario.Add("StudBirthDate", studBirthDate);
            argumentsOfScenario.Add("StudGitHubAccount", studGitHubAccount);
            argumentsOfScenario.Add("StudPhoneNumber", studPhoneNumber);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Sum", sum);
            argumentsOfScenario.Add("IsPaid", isPaid);
            argumentsOfScenario.Add("DateChange", dateChange);
            argumentsOfScenario.Add("SumChange", sumChange);
            argumentsOfScenario.Add("IsPaidChange", isPaidChange);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want to change payment", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 285
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table88.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table88.AddRow(new string[] {
                            string.Format("{0}", studFirstName),
                            string.Format("{0}", studLastName),
                            string.Format("{0}", studPatronymic),
                            string.Format("{0}", studEmail),
                            string.Format("{0}", studUsername),
                            string.Format("{0}", studPassword),
                            string.Format("{0}", studCity),
                            string.Format("{0}", studBirthDate),
                            string.Format("{0}", studGitHubAccount),
                            string.Format("{0}", studPhoneNumber)});
#line 286
 testRunner.Given("Create user", ((string)(null)), table88, "Given ");
#line hidden
#line 290
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Sum",
                            "IsPaid"});
                table89.AddRow(new string[] {
                            string.Format("{0}", date),
                            string.Format("{0}", sum),
                            string.Format("{0}", isPaid)});
#line 293
 testRunner.And("Create one payment", ((string)(null)), table89, "And ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Sum",
                            "IsPaid"});
                table90.AddRow(new string[] {
                            string.Format("{0}", dateChange),
                            string.Format("{0}", sumChange),
                            string.Format("{0}", isPaidChange)});
#line 296
 testRunner.When("Change payment", ((string)(null)), table90, "When ");
#line hidden
#line 299
 testRunner.And("Get a modified payment by", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
 testRunner.Then("Changed payment should be returned by id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a manager, I want to delete and get all payments")]
        [NUnit.Framework.CategoryAttribute("Payment")]
        [NUnit.Framework.TestCaseAttribute("Альбус", "Персиваль", "Дамблдор", "Albus@mail.ru", "Dambldor", "AlbusDambdor", "SaintPetersburg", "01.01.1985", "string", "89991234566", "Максим", "Опаздун", "Опаздунович", "Opazd@mail.ru", "ILoveOpasd", "ILoveOpasd", "SaintPetersburg", "01.01.2000", "string", "89211230987", "20.01.2022", "7500", "true", "28.02.2022", "9500", "true", "30.03.2022", "6000", "true", null)]
        public virtual void AsAManagerIWantToDeleteAndGetAllPayments(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string studFirstName, 
                    string studLastName, 
                    string studPatronymic, 
                    string studEmail, 
                    string studUsername, 
                    string studPassword, 
                    string studCity, 
                    string studBirthDate, 
                    string studGitHubAccount, 
                    string studPhoneNumber, 
                    string date, 
                    string sum, 
                    string isPaid, 
                    string date1, 
                    string sum1, 
                    string isPaid1, 
                    string date2, 
                    string sum2, 
                    string isPaid2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Payment"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("StudFirstName", studFirstName);
            argumentsOfScenario.Add("StudLastName", studLastName);
            argumentsOfScenario.Add("StudPatronymic", studPatronymic);
            argumentsOfScenario.Add("StudEmail", studEmail);
            argumentsOfScenario.Add("StudUsername", studUsername);
            argumentsOfScenario.Add("StudPassword", studPassword);
            argumentsOfScenario.Add("StudCity", studCity);
            argumentsOfScenario.Add("StudBirthDate", studBirthDate);
            argumentsOfScenario.Add("StudGitHubAccount", studGitHubAccount);
            argumentsOfScenario.Add("StudPhoneNumber", studPhoneNumber);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Sum", sum);
            argumentsOfScenario.Add("IsPaid", isPaid);
            argumentsOfScenario.Add("Date1", date1);
            argumentsOfScenario.Add("Sum1", sum1);
            argumentsOfScenario.Add("IsPaid1", isPaid1);
            argumentsOfScenario.Add("Date2", date2);
            argumentsOfScenario.Add("Sum2", sum2);
            argumentsOfScenario.Add("IsPaid2", isPaid2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a manager, I want to delete and get all payments", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 306
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table91.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table91.AddRow(new string[] {
                            string.Format("{0}", studFirstName),
                            string.Format("{0}", studLastName),
                            string.Format("{0}", studPatronymic),
                            string.Format("{0}", studEmail),
                            string.Format("{0}", studUsername),
                            string.Format("{0}", studPassword),
                            string.Format("{0}", studCity),
                            string.Format("{0}", studBirthDate),
                            string.Format("{0}", studGitHubAccount),
                            string.Format("{0}", studPhoneNumber)});
#line 307
 testRunner.Given("Create user", ((string)(null)), table91, "Given ");
#line hidden
#line 311
 testRunner.And("Autorized as admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 312
 testRunner.And("Assign manager role to user \"Manager\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
 testRunner.And("Autorized by manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Sum",
                            "IsPaid"});
                table92.AddRow(new string[] {
                            string.Format("{0}", date),
                            string.Format("{0}", sum),
                            string.Format("{0}", isPaid)});
                table92.AddRow(new string[] {
                            string.Format("{0}", date1),
                            string.Format("{0}", sum1),
                            string.Format("{0}", isPaid1)});
                table92.AddRow(new string[] {
                            string.Format("{0}", date2),
                            string.Format("{0}", sum2),
                            string.Format("{0}", isPaid2)});
#line 314
 testRunner.And("Create payments", ((string)(null)), table92, "And ");
#line hidden
#line 319
 testRunner.When("Delete payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 320
 testRunner.And("Get all payments by", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
 testRunner.Then("Remote payment should not return", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
