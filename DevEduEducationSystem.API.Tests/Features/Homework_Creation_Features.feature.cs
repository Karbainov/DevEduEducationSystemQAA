// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DevEduEducationSystem.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Homework_Creation_Features")]
    public partial class Homework_Creation_FeaturesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Homework_Creation_Features.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Homework_Creation_Features", "1.)Как преподаватель, я могу выдавать д.з.\r\n2.)Как преподаватель, я могу изменять" +
                    " д.з.\r\n3.)Как преподаватель, я могу удалять д.з.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a teacher, I can give homework")]
        [NUnit.Framework.CategoryAttribute("Homework")]
        [NUnit.Framework.TestCaseAttribute("Маркус", "Ус", "Николаевич", "Markus@mail.ru", "MarkusUs", "MarkusUs", "SaintPetersburg", "01.01.2001", "string", "89991112233", "Студент", "Иванов", "Студентович", "Stud@mail.ru", "Stud", "studentic", "SaintPetersburg", "01.01.2003", "string", "99114567890", "01.01.2022", "10.10.2022", null)]
        public virtual void AsATeacherICanGiveHomework(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string newFirstName, 
                    string newLastName, 
                    string newPatronymic, 
                    string newEmail, 
                    string newUsername, 
                    string newPassword, 
                    string newCity, 
                    string newBirthDate, 
                    string newGitHubAccount, 
                    string newPhoneNumber, 
                    string startDate1, 
                    string endDate1, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Homework"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("NewFirstName", newFirstName);
            argumentsOfScenario.Add("NewLastName", newLastName);
            argumentsOfScenario.Add("NewPatronymic", newPatronymic);
            argumentsOfScenario.Add("NewEmail", newEmail);
            argumentsOfScenario.Add("NewUsername", newUsername);
            argumentsOfScenario.Add("NewPassword", newPassword);
            argumentsOfScenario.Add("NewCity", newCity);
            argumentsOfScenario.Add("NewBirthDate", newBirthDate);
            argumentsOfScenario.Add("NewGitHubAccount", newGitHubAccount);
            argumentsOfScenario.Add("NewPhoneNumber", newPhoneNumber);
            argumentsOfScenario.Add("StartDate1", startDate1);
            argumentsOfScenario.Add("EndDate1", endDate1);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a teacher, I can give homework", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table58.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table58.AddRow(new string[] {
                            string.Format("{0}", newFirstName),
                            string.Format("{0}", newLastName),
                            string.Format("{0}", newPatronymic),
                            string.Format("{0}", newEmail),
                            string.Format("{0}", newUsername),
                            string.Format("{0}", newPassword),
                            string.Format("{0}", newCity),
                            string.Format("{0}", newBirthDate),
                            string.Format("{0}", newGitHubAccount),
                            string.Format("{0}", newPhoneNumber)});
#line 9
 testRunner.Given("Create  user", ((string)(null)), table58, "Given ");
#line hidden
#line 13
 testRunner.And("Autorized as admin \"user@example.com\" , \"stringst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("Assing  User \"Teacher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table59.AddRow(new string[] {
                            "QQQQ",
                            "Где Q и как его выводить на экран три раза"});
#line 15
 testRunner.And("Create  course", ((string)(null)), table59, "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table60.AddRow(new string[] {
                            "Группа 1",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 18:00 - 20:00",
                            "7500"});
#line 18
 testRunner.And("Create  Groupe", ((string)(null)), table60, "And ");
#line hidden
#line 21
 testRunner.And("Add users to group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Links",
                            "IsRequired"});
                table61.AddRow(new string[] {
                            "Ищем Q на клаве",
                            "Первые 2 часа история, вторые 2 часа поиски",
                            "",
                            "true"});
#line 22
 testRunner.And("Create task", ((string)(null)), table61, "And ");
#line hidden
#line 25
 testRunner.And("Authorized by teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table62.AddRow(new string[] {
                            string.Format("{0}", startDate1),
                            string.Format("{0}", endDate1)});
#line 26
 testRunner.When("Create Homework", ((string)(null)), table62, "When ");
#line hidden
#line 29
 testRunner.And("Get Homework By Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.Then("Created homework should return", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a teacher, I can give homework. Negative")]
        [NUnit.Framework.CategoryAttribute("Negative")]
        [NUnit.Framework.TestCaseAttribute("Маркус", "Ус", "Николаевич", "Markus@mail.ru", "MarkusUs", "MarkusUs", "SaintPetersburg", "01.01.2001", "string", "89991112233", "Студент", "Иванов", "Студентович", "Stud@mail.ru", "Stud", "studentic", "SaintPetersburg", "01.01.2003", "string", "99114567890", "01.01.1760", "10.10.1761", null)]
        [NUnit.Framework.TestCaseAttribute("Маркус", "Ус", "Николаевич", "Markus@mail.ru", "MarkusUs", "MarkusUs", "SaintPetersburg", "01.01.2001", "string", "89991112233", "Студент", "Иванов", "Студентович", "Stud@mail.ru", "Stud", "studentic", "SaintPetersburg", "01.01.2003", "string", "99114567890", "01.01.2023", "10.10.2022", null)]
        public virtual void AsATeacherICanGiveHomework_Negative(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string newFirstName, 
                    string newLastName, 
                    string newPatronymic, 
                    string newEmail, 
                    string newUsername, 
                    string newPassword, 
                    string newCity, 
                    string newBirthDate, 
                    string newGitHubAccount, 
                    string newPhoneNumber, 
                    string startDate1, 
                    string endDate1, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("NewFirstName", newFirstName);
            argumentsOfScenario.Add("NewLastName", newLastName);
            argumentsOfScenario.Add("NewPatronymic", newPatronymic);
            argumentsOfScenario.Add("NewEmail", newEmail);
            argumentsOfScenario.Add("NewUsername", newUsername);
            argumentsOfScenario.Add("NewPassword", newPassword);
            argumentsOfScenario.Add("NewCity", newCity);
            argumentsOfScenario.Add("NewBirthDate", newBirthDate);
            argumentsOfScenario.Add("NewGitHubAccount", newGitHubAccount);
            argumentsOfScenario.Add("NewPhoneNumber", newPhoneNumber);
            argumentsOfScenario.Add("StartDate1", startDate1);
            argumentsOfScenario.Add("EndDate1", endDate1);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a teacher, I can give homework. Negative", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table63.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table63.AddRow(new string[] {
                            string.Format("{0}", newFirstName),
                            string.Format("{0}", newLastName),
                            string.Format("{0}", newPatronymic),
                            string.Format("{0}", newEmail),
                            string.Format("{0}", newUsername),
                            string.Format("{0}", newPassword),
                            string.Format("{0}", newCity),
                            string.Format("{0}", newBirthDate),
                            string.Format("{0}", newGitHubAccount),
                            string.Format("{0}", newPhoneNumber)});
#line 37
 testRunner.Given("Create  user", ((string)(null)), table63, "Given ");
#line hidden
#line 41
 testRunner.And("Autorized as admin \"user@example.com\" , \"stringst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("Assing  User \"Teacher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table64.AddRow(new string[] {
                            "QQQQ",
                            "Где Q и как его выводить на экран три раза"});
#line 43
 testRunner.And("Create  course", ((string)(null)), table64, "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table65.AddRow(new string[] {
                            "Группа 1",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 18:00 - 20:00",
                            "7500"});
#line 46
 testRunner.And("Create  Groupe", ((string)(null)), table65, "And ");
#line hidden
#line 49
 testRunner.And("Add users to group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Links",
                            "IsRequired"});
                table66.AddRow(new string[] {
                            "Ищем Q на клаве",
                            "Первые 2 часа история, вторые 2 часа поиски",
                            "",
                            "true"});
#line 50
 testRunner.And("Create task", ((string)(null)), table66, "And ");
#line hidden
#line 53
 testRunner.And("Authorized by teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table67.AddRow(new string[] {
                            string.Format("{0}", startDate1),
                            string.Format("{0}", endDate1)});
#line 54
 testRunner.When("Create Homework", ((string)(null)), table67, "When ");
#line hidden
#line 57
 testRunner.Then("The created homework status code should be 422", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a teacher, I can change my homework")]
        [NUnit.Framework.CategoryAttribute("Homework")]
        [NUnit.Framework.TestCaseAttribute("Маркус", "Ус", "Николаевич", "Markus@mail.ru", "MarkusUs", "MarkusUs", "SaintPetersburg", "01.01.2001", "string", "89991112233", "Студент", "Иванов", "Студентович", "Stud@mail.ru", "Stud", "studentic", "SaintPetersburg", "01.01.2003", "string", "99114567890", "01.01.2022", "10.10.2022", "10.01.2022", "10.11.2022", null)]
        public virtual void AsATeacherICanChangeMyHomework(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string newFirstName, 
                    string newLastName, 
                    string newPatronymic, 
                    string newEmail, 
                    string newUsername, 
                    string newPassword, 
                    string newCity, 
                    string newBirthDate, 
                    string newGitHubAccount, 
                    string newPhoneNumber, 
                    string startDate1, 
                    string endDate1, 
                    string startDate2, 
                    string endDate2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Homework"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("NewFirstName", newFirstName);
            argumentsOfScenario.Add("NewLastName", newLastName);
            argumentsOfScenario.Add("NewPatronymic", newPatronymic);
            argumentsOfScenario.Add("NewEmail", newEmail);
            argumentsOfScenario.Add("NewUsername", newUsername);
            argumentsOfScenario.Add("NewPassword", newPassword);
            argumentsOfScenario.Add("NewCity", newCity);
            argumentsOfScenario.Add("NewBirthDate", newBirthDate);
            argumentsOfScenario.Add("NewGitHubAccount", newGitHubAccount);
            argumentsOfScenario.Add("NewPhoneNumber", newPhoneNumber);
            argumentsOfScenario.Add("StartDate1", startDate1);
            argumentsOfScenario.Add("EndDate1", endDate1);
            argumentsOfScenario.Add("StartDate2", startDate2);
            argumentsOfScenario.Add("EndDate2", endDate2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a teacher, I can change my homework", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table68.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table68.AddRow(new string[] {
                            string.Format("{0}", newFirstName),
                            string.Format("{0}", newLastName),
                            string.Format("{0}", newPatronymic),
                            string.Format("{0}", newEmail),
                            string.Format("{0}", newUsername),
                            string.Format("{0}", newPassword),
                            string.Format("{0}", newCity),
                            string.Format("{0}", newBirthDate),
                            string.Format("{0}", newGitHubAccount),
                            string.Format("{0}", newPhoneNumber)});
#line 65
 testRunner.Given("Create  user", ((string)(null)), table68, "Given ");
#line hidden
#line 69
 testRunner.And("Autorized as admin \"user@example.com\" , \"stringst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("Assing  User \"Teacher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table69.AddRow(new string[] {
                            "QQQQ",
                            "Где Q и как его выводить на экран три раза"});
#line 71
 testRunner.And("Create  course", ((string)(null)), table69, "And ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table70.AddRow(new string[] {
                            "Группа 1",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 18:00 - 20:00",
                            "7500"});
#line 74
 testRunner.And("Create  Groupe", ((string)(null)), table70, "And ");
#line hidden
#line 77
 testRunner.And("Add users to group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Links",
                            "IsRequired"});
                table71.AddRow(new string[] {
                            "Ищем Q на клаве",
                            "Первые 2 часа история, вторые 2 часа поиски",
                            "",
                            "true"});
#line 78
 testRunner.And("Create task", ((string)(null)), table71, "And ");
#line hidden
#line 81
 testRunner.And("Authorized by teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table72.AddRow(new string[] {
                            string.Format("{0}", startDate1),
                            string.Format("{0}", endDate1)});
#line 82
 testRunner.And("Create Homework", ((string)(null)), table72, "And ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table73.AddRow(new string[] {
                            string.Format("{0}", startDate2),
                            string.Format("{0}", endDate2)});
#line 85
 testRunner.When("Edit a previously created homework", ((string)(null)), table73, "When ");
#line hidden
#line 88
 testRunner.And("Get Homework By Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.Then("Сheck the modified homework should have come", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As a teacher, I can delete my homework")]
        [NUnit.Framework.CategoryAttribute("Homework")]
        [NUnit.Framework.TestCaseAttribute("Маркус", "Ус", "Николаевич", "Markus@mail.ru", "MarkusUs", "MarkusUs", "SaintPetersburg", "01.01.2001", "string", "89991112233", "Студент", "Иванов", "Студентович", "Stud@mail.ru", "Stud", "studentic", "SaintPetersburg", "01.01.2003", "string", "99114567890", "01.01.2022", "10.01.2022", "11.01.2022", "20.01.2022", "21.01.2022", "25.01.2022", "26.01.2022", "01.02.2022", null)]
        public virtual void AsATeacherICanDeleteMyHomework(
                    string firstName, 
                    string lastName, 
                    string patronymic, 
                    string email, 
                    string username, 
                    string password, 
                    string city, 
                    string birthDate, 
                    string gitHubAccount, 
                    string phoneNumber, 
                    string newFirstName, 
                    string newLastName, 
                    string newPatronymic, 
                    string newEmail, 
                    string newUsername, 
                    string newPassword, 
                    string newCity, 
                    string newBirthDate, 
                    string newGitHubAccount, 
                    string newPhoneNumber, 
                    string startDate1, 
                    string endDate1, 
                    string startDate2, 
                    string endDate2, 
                    string startDate3, 
                    string endDate3, 
                    string startDate4, 
                    string endDate4, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Homework"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Patronymic", patronymic);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("City", city);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("GitHubAccount", gitHubAccount);
            argumentsOfScenario.Add("PhoneNumber", phoneNumber);
            argumentsOfScenario.Add("NewFirstName", newFirstName);
            argumentsOfScenario.Add("NewLastName", newLastName);
            argumentsOfScenario.Add("NewPatronymic", newPatronymic);
            argumentsOfScenario.Add("NewEmail", newEmail);
            argumentsOfScenario.Add("NewUsername", newUsername);
            argumentsOfScenario.Add("NewPassword", newPassword);
            argumentsOfScenario.Add("NewCity", newCity);
            argumentsOfScenario.Add("NewBirthDate", newBirthDate);
            argumentsOfScenario.Add("NewGitHubAccount", newGitHubAccount);
            argumentsOfScenario.Add("NewPhoneNumber", newPhoneNumber);
            argumentsOfScenario.Add("StartDate1", startDate1);
            argumentsOfScenario.Add("EndDate1", endDate1);
            argumentsOfScenario.Add("StartDate2", startDate2);
            argumentsOfScenario.Add("EndDate2", endDate2);
            argumentsOfScenario.Add("StartDate3", startDate3);
            argumentsOfScenario.Add("EndDate3", endDate3);
            argumentsOfScenario.Add("StartDate4", startDate4);
            argumentsOfScenario.Add("EndDate4", endDate4);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As a teacher, I can delete my homework", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Patronymic",
                            "Email",
                            "Username",
                            "Password",
                            "City",
                            "BirthDate",
                            "GitHubAccount",
                            "PhoneNumber"});
                table74.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", patronymic),
                            string.Format("{0}", email),
                            string.Format("{0}", username),
                            string.Format("{0}", password),
                            string.Format("{0}", city),
                            string.Format("{0}", birthDate),
                            string.Format("{0}", gitHubAccount),
                            string.Format("{0}", phoneNumber)});
                table74.AddRow(new string[] {
                            string.Format("{0}", newFirstName),
                            string.Format("{0}", newLastName),
                            string.Format("{0}", newPatronymic),
                            string.Format("{0}", newEmail),
                            string.Format("{0}", newUsername),
                            string.Format("{0}", newPassword),
                            string.Format("{0}", newCity),
                            string.Format("{0}", newBirthDate),
                            string.Format("{0}", newGitHubAccount),
                            string.Format("{0}", newPhoneNumber)});
#line 96
 testRunner.Given("Create  user", ((string)(null)), table74, "Given ");
#line hidden
#line 100
 testRunner.And("Autorized as admin \"user@example.com\" , \"stringst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("Assing  User \"Teacher\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description"});
                table75.AddRow(new string[] {
                            "QQQQ",
                            "Где Q и как его выводить на экран три раза"});
#line 102
 testRunner.And("Create  course", ((string)(null)), table75, "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "GroupStatusId",
                            "StartDate",
                            "EndDate",
                            "Timetable",
                            "PaymentPerMonth"});
                table76.AddRow(new string[] {
                            "Группа 1",
                            "1",
                            "28.01.2022",
                            "28.10.2022",
                            "пн, ср, пт 18:00 - 20:00",
                            "7500"});
#line 105
 testRunner.And("Create  Groupe", ((string)(null)), table76, "And ");
#line hidden
#line 108
 testRunner.And("Add users to group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Links",
                            "IsRequired"});
                table77.AddRow(new string[] {
                            "Ищем Q на клаве",
                            "Первые 2 часа история, вторые 2 часа поиски",
                            "",
                            "true"});
                table77.AddRow(new string[] {
                            "Ищем время",
                            "Как искать время",
                            "",
                            "true"});
                table77.AddRow(new string[] {
                            "Ищем телегу",
                            "Как искать телегу",
                            "",
                            "true"});
                table77.AddRow(new string[] {
                            "Как отвечать,но не ответить",
                            "Сложная филосовская наука",
                            "",
                            "true"});
#line 109
 testRunner.And("Create tasks", ((string)(null)), table77, "And ");
#line hidden
#line 115
 testRunner.And("Authorized by teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table78.AddRow(new string[] {
                            string.Format("{0}", startDate1),
                            string.Format("{0}", endDate1)});
                table78.AddRow(new string[] {
                            string.Format("{0}", startDate2),
                            string.Format("{0}", endDate2)});
                table78.AddRow(new string[] {
                            string.Format("{0}", startDate3),
                            string.Format("{0}", endDate3)});
                table78.AddRow(new string[] {
                            string.Format("{0}", startDate4),
                            string.Format("{0}", endDate4)});
#line 116
 testRunner.And("Create Homeworks", ((string)(null)), table78, "And ");
#line hidden
#line 122
 testRunner.When("Delete previously created homework", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.And("Get all homeworks by group", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.Then("Check homework should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
